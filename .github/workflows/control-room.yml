name: Run Robocloud Fresh-News Process

on:
  push:
    branches:
      - master

jobs:
  run_process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.12'

      - name: Install RCC
        run: |
          curl -o rcc https://downloads.robocorp.com/rcc/releases/latest/linux64/rcc
          chmod +x rcc
          sudo mv rcc /usr/local/bin/rcc
          rcc configure credentials ${{ secrets.ROBOCORP_ACCESS_CREDENTIALS }} --account ${{ secrets.ROBOCORP_ACCOUNT_ID }}

      - name: Check if Robocloud Process Exists
        id: check_process
        run: |
          # Check if the process exists using rcc command
          # Try to create the Robocloud process using rcc command
          # If it fails due to the robot already existing, capture the error message
          ROBOT_CREATION_OUTPUT=$(rcc cloud new -r Placide_Ebongue -w ${{ secrets.ROBOCORP_WORKSPACE_ID }} --json 2>/dev/null || true)
          if echo "$ROBOT_CREATION_OUTPUT" | grep -q "ROBOT_WITH_SAME_NAME_ALREADY_EXISTS"; then
            echo "Robot with the same name already exists."
            echo "name=exists::true" >> $GITHUB_OUTPUT
          else
            echo "name=exists::false" >> $GITHUB_OUTPUT
          fi

      - name: Create Robocloud Process if Not Exist
        id: create_robot
        if: steps.check_process.outputs.exists != 'true'
        run: |
          # Extract the robot ID from the output JSON
          ROBOT_ID=$(echo "$ROBOT_CREATION_OUTPUT" | jq -r '.identity')
          echo "name=robot_id::$ROBOT_ID" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run Robocloud Process
        env:
          ROBOCLOUD_API_KEY: ${{ secrets.ROBOCORP_API_KEY }}
        run: |
          # Only proceed if the robot was created or if it already existed
          if grep -q "name=robot_id" $GITHUB_OUTPUT || grep -q "name=exists::true" $GITHUB_OUTPUT; then
            # Extract the robot ID from the output JSON
            ROBOT_ID=${{ secrets.ROBOCORP_ROBOT_ID }}
            # Push the robot to Robocorp Control Room using the retrieved robot ID
            rcc cloud push -d . -r $ROBOT_ID -w ${{ secrets.ROBOCORP_WORKSPACE_ID }}
            # Capture the exit code of the previous command
            EXIT_CODE=$?
            # Provide feedback based on the exit code
            if [ $EXIT_CODE -eq 0 ]; then
              echo "Robocloud process completed successfully."
            else
              echo "Robocloud process failed with exit code $EXIT_CODE."
              exit $EXIT_CODE
            fi
          else
            echo "Failed to create or find the robot. Exiting..."
            exit 1
          fi
